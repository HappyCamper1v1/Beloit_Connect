// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  firstname        String?
  lastname         String?
  major            String?
  industry         String?
  status           String?
  bio              String?   @db.Text
  age              Int?
  year             Int?
  profession       String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime  @default(now())
  accounts         Account[]
  messagesSent     Message[] @relation("messageSender")
  messagesReceived Message[] @relation("messageReceiver")
  following        Follow[]  @relation("follower")
  followers        Follow[]  @relation("following")
  posts            Post[]
  sessions         Session[]
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Message {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  content    String   @db.Text
  senderId   String
  receiverId String
  sender     User     @relation("messageSender", fields: [senderId], references: [id])
  receiver   User     @relation("messageReceiver", fields: [receiverId], references: [id])

  @@index([senderId, receiverId])
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String   @db.Text
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
